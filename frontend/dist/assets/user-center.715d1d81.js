import{d,e as o}from"./index.35e9d874.js";import{c as m,G as u}from"./model-list.f24c2e5d.js";async function f(n){const s=[],a=await d.get(o(`/user/list_llm_subscription/${n}`)),i=await m();for(let e=0;e<a.data.llms.length;e+=1){const l=a.data.llms[e];i.data.forEach(r=>{r.id===l.id&&s.push({id:l.id,name:l.name,ranking:r.ranking})})}return s}async function w(n){const s=[],a=await d.get(o(`/user/list_dataset_subscription/${n}`));for(let i=0;i<a.data.datasets.length;i+=1){const e=a.data.datasets[i];s.push({id:e.id,name:e.name,domain:e.domain})}return s}function g(n,s){return d.post(o("/user/update_avatar"),n,{headers:{Authorization:s}})}async function h(n){const s=await d.get(o("/testing/list")),a=[],i=new Set,e=s.data.data.map(async l=>{const r=await d.post(o("/testing/battle_history"),{llm:l.id});await Promise.all(r.data.data.map(async t=>{i.has(t.id)||(i.add(t.id),t.user_id===n&&(a.push({id:t.id,testUser:t.user_id,model:(await u(t.llm1)).name,adversarialModel:(await u(t.llm2)).name,battleTime:t.add_time,winner:"",QA:t.result}),t.winner===1?a[a.length-1].winner=a[a.length-1].model:t.winner===-1&&(a[a.length-1].winner=a[a.length-1].adversarialModel)))}))});return await Promise.all(e),a}export{w as a,h as b,f as q,g as u};
